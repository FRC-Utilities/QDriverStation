#--------------------------------------------------------------------------------
# Workflow configuration
#--------------------------------------------------------------------------------

name: Build
on:
  push:               # Run on push
    paths-ignore:     # File patterns to ignore
    - '**.md'         # Ignore changes to *.md files

  pull_request:       # Run on pull-request
    paths-ignore:     # File-patterns to ignore
    - '**.md'         # Ignore changes to *.md files

  workflow_dispatch:

#--------------------------------------------------------------------------------
# Define application name & version
#--------------------------------------------------------------------------------

env:
  VERSION: "21.04"
  EXECUTABLE: "QDriverStation"
  QMAKE_PROJECT: "QDriverStation.pro"
  QML_DIR_NIX: "qml"
  QML_DIR_WIN: "qml"

#--------------------------------------------------------------------------------
# Workflow jobs (GNU/Linux, macOS & Windows)
#--------------------------------------------------------------------------------

jobs:


  # GNU/Linux build (we run on Ubuntu 16.04 to generate AppImage)
  build-linux:
    runs-on: ubuntu-16.04
    name: 'üêß Ubuntu 16.04'
    steps:

    - name: 'üß∞ Checkout'
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: '‚öôÔ∏è Cache Qt'
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{runner.os}}-QtCache

    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v2
      with:
        modules: qtcharts
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    # Install additional dependencies, stolen from:
    # https://github.com/mapeditor/tiled/blob/master/.github/workflows/packages.yml
    - name: '‚öôÔ∏è Install dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev libsdl2-dev

    - name: 'üöß Compile application'
      run: |
          qmake ${{env.QMAKE_PROJECT}} CONFIG+=release PREFIX=/usr
          make -j8

    - name: 'üì¶ Create AppImage'
      run: |
        make INSTALL_ROOT=appdir install

        wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage" -O linuxdeployqt
        chmod a+x linuxdeployqt
        ./linuxdeployqt appdir/usr/share/applications/*.desktop -appimage -bundle-non-qt-libs -extra-plugins=imageformats/libqsvg.so -qmldir="${{env.QML_DIR_NIX}}"

        # Rename AppImage to match "%AppName%-%Version%-Linux.AppImage" format
        mv *.AppImage ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage

    - name: 'üì§ Upload artifact: AppImage'
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage


  # macOS build
  build-mac:
    runs-on: macos-latest
    name: 'üçé macOS'
    steps:

    - name: 'üß∞ Checkout'
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: '‚öôÔ∏è Cache Qt'
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{runner.os}}-QtCache

    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v2
      with:
        modules: qtcharts
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    - name: 'üöß Compile application'
      run: |
           qmake ${{env.QMAKE_PROJECT}} CONFIG+=release
           make -j8

    - name: 'üì¶ Package application (macdeployqt and zipfile)'
      run: |
        macdeployqt ${{env.EXECUTABLE}}.app -qmldir="${{env.QML_DIR_NIX}}"

        # ZIP application "%AppName%-%Version%-macOS.zip"
        # We use ditto instead of zip to use the same commands as Finder
        ditto -c -k --sequesterRsrc --keepParent "${{env.EXECUTABLE}}.app" ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip

    - name: 'üì§ Upload artifact: ZIP'
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip


  # Windows build
  build-windows:
    runs-on: windows-latest
    name: 'üßä Windows'
    steps:

    - name: 'üß∞ Checkout'
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: '‚öôÔ∏è Configure MSVC'
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: x64
        spectre: true

    - name: '‚öôÔ∏è Cache Qt'
      id: cache-qt
      uses: actions/cache@v1
      with:
        path: ../Qt
        key: ${{runner.os}}-QtCache

    - name: '‚öôÔ∏è Install Qt'
      uses: jurplel/install-qt-action@v2
      with:
        modules: qtcharts
        cached: ${{steps.cache-qt.outputs.cache-hit}}

    - name: '‚öôÔ∏è Install NSIS'
      run: |
        Invoke-Expression (New-Object System.Net.WebClient).DownloadString('https://get.scoop.sh')
        scoop bucket add extras
        scoop install nsis

    - name: 'üöß Compile application'
      run: |
        qmake ${{env.QMAKE_PROJECT}} CONFIG+=release
        nmake

    # Copy Qt DLLs, compiler runtime & application icon
    - name: 'üì¶ Package application (windeployqt)'
      run: |
        mkdir bin
        move release/${{env.EXECUTABLE}}.exe bin
        windeployqt bin/${{env.EXECUTABLE}}.exe -qmldir="${{env.QML_DIR_WIN}}" --compiler-runtime
        mkdir "${{env.EXECUTABLE}}"
        move bin "${{env.EXECUTABLE}}"
        xcopy etc\deploy\windows\resources\icon.ico "${{env.APPLICATION}}"

    - name: 'üì¶ Make NSIS installer'
      run: |
        move "${{env.EXECUTABLE}}" etc\deploy\windows\nsis\
        cd etc\deploy\windows\nsis
        makensis /X"SetCompressor /FINAL lzma" setup.nsi
        ren *.exe ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe

    - name: 'üì§ Upload artifact: NSIS installer'
      uses: actions/upload-artifact@v2
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
        path: etc/deploy/windows/nsis/${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
